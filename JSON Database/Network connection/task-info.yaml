type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram server = new TestedProgram(server.Main.class);
            server.startInBackground();
            Thread.sleep(500);

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram(client.Main.class);

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/Database.java
  visible: true
  text: |
    package server;


    import java.util.Objects;

    public class Database {

        private static String[] database;

        static {
            database = new String[100];
        }


        public static void setMethod(int index, String content) {
            database[index] = content;
        }

        public static String getMethod(int index) throws IllegalArgumentException {
            if (checkIfEmpty(index)) {
                throw new IllegalArgumentException();
            } else {
                return database[index];
            }
        }

        public static void deleteMethod(int index) {
            database[index] = null;
        }

        private static boolean checkIfEmpty(int index) {
            return Objects.equals(database[index], null);
        }


    }
  learner_created: true
- name: src/server/DatabaseDao.java
  visible: true
  text: |
    package server;

    public class DatabaseDao {

        public String setMethod(int index, String content) {
            if (validIndex(index)) {
                Database.setMethod(index, content);
                return "OK";
            }
            return "ERROR";
        }

        public String getMethod(int index) {
            if (validIndex(index)) {
                try {
                    return Database.getMethod(index);
                }catch (Exception e) {
                    return "ERROR";
                }
            }
            return "ERROR";
        }

        public String deleteMethod(int index) {
            if (validIndex(index)) {
                Database.deleteMethod(index);
                return "OK";
            }
            return "ERROR";
        }

        private boolean validIndex(int index) {
            if (index >= 0 && index <= 99) {
                return true;
            }
            return false;
        }

    }
  learner_created: true
- name: src/server/ClientInterface.java
  visible: true
  text: |
    package server;

    import server.Database;
    import server.DatabaseDao;

    public class ClientInterface {

        private static DatabaseDao databaseDao;

        static {
            databaseDao = new DatabaseDao();
        }

        public static String getMethodFromInput(String input) {
            String[] inputArray = input.split(" ", 3);
            String method = inputArray[0];
            int index = Integer.valueOf(inputArray[1]) - 1;
            switch (method) {
                case "get":
                    return databaseDao.getMethod(index);
                case "set":

                    return databaseDao.setMethod(index, inputArray[2]);
                case "delete":
                    return databaseDao.deleteMethod(index);
                default:
                    return "ERROR";
            }
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/349/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/65/stages/349/implement">JetBrains
    Academy</a>
  time: Mon, 23 Nov 2020 18:32:51 UTC
record: -1
