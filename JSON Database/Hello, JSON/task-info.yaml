type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'response' key");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";
        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        @DynamicTestingMethod
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram(client.Main.class);
        }

        private static TestedProgram getServer() {
            return new TestedProgram(server.Main.class);
        }

    }
  learner_created: false
- name: src/server/ConnectionWorker.java
  visible: true
  text: |+
    package server;


    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.Objects;

        /**
         * In this class we provide processing of messages received by the server
         */
        public class ConnectionWorker implements Runnable {
            private final InputReader inputReader;
            private final OutputWriter outputWriter;
            private final Socket socket;
            private final ServerSocket serverSocket;
            private static final boolean DEBUG_MODE = false;
            private final Database dataBase;
            private int index;
            private String data;

            /**
             * Constructor of the message processing object
             * @param socket - Socket, connection with client
             * @param serverSocket - ServerSocket, connection or server
             * @param dataBase - object, where data is stored
             */
            public ConnectionWorker(final Socket socket, ServerSocket serverSocket, Database dataBase) {
                if (DEBUG_MODE) {
                    System.out.println("Client connected!");
                }
                this.socket = socket;
                this.serverSocket = serverSocket;
                this.dataBase = dataBase;
                this.inputReader = new InputReader(socket);
                this.outputWriter = new OutputWriter(socket);
            }

            /**
             * Get the query string and process it
             * according to the condition.
             */
            @Override
            public void run() {
                String command;
                do {
                    final String rawMessage = inputReader.read().trim();

                    command = getCommand(rawMessage);

                    switch (command) {
                        case "get":
                            String result = dataBase.getData(index);
                            outputWriter.sentMessage(Objects.requireNonNullElse(result, "ERROR"));
                            break;
                        case "set":
                            outputWriter.sentMessage(dataBase.setData(index, data) ? "OK" : "ERROR");
                            break;
                        case "delete":
                            outputWriter.sentMessage(dataBase.deleteData(index) ? "OK" : "ERROR");
                            break;
                        case "exit":
                            outputWriter.sentMessage("OK");
                            closeSocket();
                            try {
                                serverSocket.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            break;
                    }
                } while (!command.equals("exit"));
            }

            /**
             * Getting the command and data from raw request received from the client
             * @param rawMessage - String, rew request from client
             * @return - String, main command for database
             */
            public String getCommand(String rawMessage) {
                String[] input = rawMessage.split(" ");
                if (input.length > 1) {
                    index = Integer.parseInt(input[1]) - 1;
                }
                if (input.length > 2) {
                    data = input[2];
                }
                if (input.length > 3) {
                    for (int i = 3; i < input.length; i++) {
                        data = data.concat(" ").concat(input[i]);
                    }
                }
                return input[0];
            }

            /**
             * Break connection
             */
            private void closeSocket() {
                try {
                    socket.close();
                } catch (Exception ignored) {
                }
            }

        }

  learner_created: true
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    public class Database {

        String[] array;

        public Database(int size) {
            this.array = new String[size];
        }

        public boolean setData(int index, String data) {
            if (index >= this.array.length) {
                return false;
            } else {
                this.array[index] = data;
                return true;
            }
        }


        public String getData(int index) {
            System.out.println("got index:" + index);
            if (index < 0 || index >= this.array.length) {
                return "";
            } else {
                return this.array[index];
            }
        }


        public boolean deleteData(int index) {
            if (index < 0 || index >= this.array.length) {
                return false;
            } else {
                this.array[index] = null;
                return true;
            }
        }
    }
  learner_created: true
- name: src/server/InputReader.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.EOFException;
    import java.net.Socket;
    import java.net.SocketException;

    public class InputReader {

        private final Socket socket;
        private DataInputStream dataInputStream;

        /**
         * Constructor of the object for getting data from the socket
         *
         * @param socket - Socket, connection
         */
        public InputReader(final Socket socket) {
            this.socket = socket;
            createInputStream();
        }

        public String read() {
            try {
                return dataInputStream.readUTF();
            } catch (EOFException | SocketException ignored) {
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("[InputReader] can't read the message");
            }
            return "";
        }

        private void createInputStream() {
            try {
                dataInputStream = new DataInputStream(socket.getInputStream());
            } catch (Exception e) {
                System.out.println("[InputReader] can't create a input stream");
            }

        }
    }
  learner_created: true
- name: src/client/Message.java
  visible: true
  text: |
    package client;

    import com.beust.jcommander.Parameter;

    public class Message {

        @Parameter(names = "-t")
        private String type;

        @Parameter(names = "-i")
        private int index;

        @Parameter(names = "-m")
        private String content;


        public Message() {
            this.content = "";
        }

        public String getType() {
            return type;
        }

        public int getIndex() {
            return index;
        }

        public String getContent() {
            return content;
        }
    }
  learner_created: true
- name: src/server/OutputWriter.java
  visible: true
  text: |
    package server;

    import java.io.DataOutputStream;
    import java.io.EOFException;
    import java.net.Socket;
    import java.net.SocketException;

        /**
         * In this class, we create an object for sending data in the connection
         */
        public class OutputWriter {
            private final Socket socket;
            private DataOutputStream dataOutputStream;


            /**
             * Constructor of the object for sending data to the socket
             * @param socket - Socket, connection
             */
            public OutputWriter(final Socket socket) {
                this.socket = socket;
                createOutputStream();
            }

            public void sentMessage(final String message) {
                try {
                    dataOutputStream.writeUTF(message);
                } catch (EOFException | SocketException ignored) {
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("[OutputWriter] can't write the message");
                }
            }

            private void createOutputStream() {
                try {
                    dataOutputStream = new DataOutputStream(socket.getOutputStream());
                } catch (Exception e) {
                    System.out.println("[outputWriter] can't create a output stream");
                }

            }

        }
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/351/implement#comment
status: Unchecked
record: 4
